{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n/* eslint-disable function-paren-newline */ \"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable no-unused-vars */ /* eslint-disable function-paren-newline */ function $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.cells = initialState;\n        this.initialCells = initialState.map(function(row) {\n            return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n        });\n        this.isGameStarted = false;\n        this.score = 0;\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var cellsCopy = this.cells.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                if (this.isGameStarted === true) {\n                    var mergers = 0;\n                    var MERGERS_LIMIT = 2;\n                    this.cells.forEach(function(row) {\n                        for(var numIndex = 0; numIndex < row.length - 1; numIndex++)if (row[numIndex] && row[numIndex] === row[numIndex + 1]) {\n                            var ref;\n                            ref = [\n                                row[numIndex] *= 2,\n                                0\n                            ], row[numIndex] = ref[0], row[numIndex + 1] = ref[1], ref;\n                            _this.score += row[numIndex];\n                            mergers += 1;\n                        }\n                        for(var numIndex1 = 1; numIndex1 < row.length; numIndex1++)for(var i = numIndex1; i > 0; i--){\n                            if (row[i - 1] === 0) {\n                                var ref1;\n                                ref1 = [\n                                    row[i],\n                                    row[i - 1]\n                                ], row[i - 1] = ref1[0], row[i] = ref1[1], ref1;\n                                continue;\n                            }\n                            if (row[i - 1] === row[i] && mergers < MERGERS_LIMIT) {\n                                var ref2;\n                                ref2 = [\n                                    row[i - 1] *= 2,\n                                    0\n                                ], row[i - 1] = ref2[0], row[i] = ref2[1], ref2;\n                                _this.score += row[i - 1];\n                                mergers += 1;\n                                break;\n                            }\n                        }\n                    });\n                    if (this.isBoardChanged(this.cells, cellsCopy) === true) this.addStartingValue();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var cellsCopy = this.cells.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                if (this.isGameStarted === true) {\n                    var mergers = 0;\n                    var MERGERS_LIMIT = 2;\n                    this.cells.forEach(function(row) {\n                        for(var numIndex = row.length - 1; numIndex > 0; numIndex--)if (row[numIndex] && row[numIndex] === row[numIndex - 1]) {\n                            var ref;\n                            ref = [\n                                row[numIndex] *= 2,\n                                0\n                            ], row[numIndex] = ref[0], row[numIndex - 1] = ref[1], ref;\n                            _this.score += row[numIndex];\n                            mergers += 1;\n                        }\n                        for(var numIndex1 = row.length - 2; numIndex1 >= 0; numIndex1--)for(var i = numIndex1; i < row.length - 1; i++){\n                            if (row[i + 1] === 0) {\n                                var ref1;\n                                ref1 = [\n                                    row[i],\n                                    row[i + 1]\n                                ], row[i + 1] = ref1[0], row[i] = ref1[1], ref1;\n                                continue;\n                            }\n                            if (row[i + 1] === row[i] && mergers < MERGERS_LIMIT) {\n                                var ref2;\n                                ref2 = [\n                                    row[i + 1] *= 2,\n                                    0\n                                ], row[i + 1] = ref2[0], row[i] = ref2[1], ref2;\n                                _this.score += row[i + 1];\n                                mergers += 1;\n                                break;\n                            }\n                        }\n                    });\n                    if (this.isBoardChanged(this.cells, cellsCopy) === true) this.addStartingValue();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var cells = this.cells;\n                var cellsCopy = cells.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                if (this.isGameStarted === true) {\n                    var _this1 = this, _loop = function(numIndex) {\n                        var mergers = 0;\n                        var MERGERS_LIMIT = 2;\n                        cells.forEach(function(row, rowIndex) {\n                            if (rowIndex < cells.length - 1 && cells[rowIndex][numIndex] && cells[rowIndex + 1][numIndex] === cells[rowIndex][numIndex]) {\n                                cells[rowIndex][numIndex] *= 2;\n                                cells[rowIndex + 1][numIndex] = 0;\n                                _this.score += cells[rowIndex][numIndex];\n                                mergers += 1;\n                            }\n                        });\n                        for(var rowIndex = 1; rowIndex < cells.length; rowIndex++)for(var i = rowIndex; i > 0; i--){\n                            if (cells[i - 1][numIndex] === 0) {\n                                cells[i - 1][numIndex] = cells[i][numIndex];\n                                cells[i][numIndex] = 0;\n                                continue;\n                            }\n                            if (cells[i - 1][numIndex] === cells[i][numIndex] && mergers < MERGERS_LIMIT - 1) {\n                                cells[i - 1][numIndex] *= 2;\n                                cells[i][numIndex] = 0;\n                                mergers += 1;\n                                _this1.score += cells[i - 1][numIndex];\n                                break;\n                            }\n                        }\n                    };\n                    for(var numIndex = 0; numIndex < cells[0].length; numIndex++)_loop(numIndex);\n                    if (this.isBoardChanged(cells, cellsCopy) === true) this.addStartingValue();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var cells = this.cells;\n                var cellsCopy = cells.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$71511d61b312f219)(row);\n                });\n                if (this.isGameStarted === true) {\n                    for(var numIndex = 0; numIndex < cells[0].length; numIndex++){\n                        var mergers = 0;\n                        var MERGERS_LIMIT = 2;\n                        for(var i = cells.length - 1; i >= 0; i--)if (i > 0 && cells[i][numIndex] && cells[i - 1][numIndex] === cells[i][numIndex]) {\n                            cells[i][numIndex] *= 2;\n                            cells[i - 1][numIndex] = 0;\n                            this.score += cells[i][numIndex];\n                            mergers += 1;\n                        }\n                        for(var rowIndex = cells.length - 2; rowIndex >= 0; rowIndex--)for(var i1 = rowIndex; i1 < cells.length - 1; i1++){\n                            if (cells[i1 + 1][numIndex] === 0) {\n                                cells[i1 + 1][numIndex] = cells[i1][numIndex];\n                                cells[i1][numIndex] = 0;\n                                continue;\n                            }\n                            if (cells[i1 + 1][numIndex] === cells[i1][numIndex] && mergers < MERGERS_LIMIT - 1) {\n                                cells[i1 + 1][numIndex] *= 2;\n                                cells[i1][numIndex] = 0;\n                                this.score += cells[i1 + 1][numIndex];\n                                mergers += 1;\n                                break;\n                            }\n                        }\n                    }\n                    if (this.isBoardChanged(cells, cellsCopy) === true) this.addStartingValue();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.cells;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                var _this = this;\n                var checker = this.cells.some(function(row, rowIndex) {\n                    return row.some(function(cell, cellIndex) {\n                        if (rowIndex < _this.cells.length - 1 && (cell === row[cellIndex + 1] || cell === _this.cells[rowIndex + 1][cellIndex]) || rowIndex === _this.cells.length - 1 && cell === row[cellIndex + 1]) return true;\n                        return false;\n                    });\n                });\n                if (this.cells.some(function(row) {\n                    return row.some(function(cell) {\n                        return cell === 2048;\n                    });\n                })) return \"win\";\n                if (this.cells.every(function(row) {\n                    return row.every(function(cell) {\n                        return cell !== 0;\n                    });\n                }) && checker === false) return \"lose\";\n                if (this.isGameStarted === false) return \"idle\";\n                if (this.isGameStarted === true) return \"playing\";\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var firstStartRowIndex = this.getStartRow();\n                var firstStartCellIndex = this.getStartCell(firstStartRowIndex);\n                var secondStartRowIndex = this.getStartRow();\n                var secondStartCellIndex = this.getStartCell(secondStartRowIndex);\n                if (firstStartRowIndex === secondStartRowIndex && firstStartCellIndex === secondStartCellIndex) return this.start();\n                var firstValue = this.getStartValue();\n                var secondValue = this.getStartValue();\n                this.cells[firstStartRowIndex][firstStartCellIndex] = firstValue;\n                this.cells[secondStartRowIndex][secondStartCellIndex] = secondValue;\n                this.isGameStarted = true;\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                var _this = this;\n                this.cells.forEach(function(row, rowIndex) {\n                    return row.forEach(function(cell, cellIndex) {\n                        row[cellIndex] = _this.initialCells[rowIndex][cellIndex];\n                    });\n                });\n                this.isGameStarted = false;\n                this.score = 0;\n            }\n        },\n        {\n            key: \"addStartingValue\",\n            value: function addStartingValue() {\n                var rowIndex = this.getStartRow();\n                var cellIndex = this.getStartCell(rowIndex);\n                var value = this.getStartValue();\n                this.cells[rowIndex][cellIndex] = value;\n            }\n        },\n        {\n            key: \"getStartRow\",\n            value: function getStartRow() {\n                var randomRowIndex = Math.floor(Math.random() * this.cells.length);\n                if (this.cells[randomRowIndex].every(function(cell) {\n                    return cell !== 0;\n                })) return this.getStartRow();\n                return randomRowIndex;\n            }\n        },\n        {\n            key: \"getStartCell\",\n            value: function getStartCell(rowIndex) {\n                var randomCellIndex = Math.floor(Math.random() * this.cells[rowIndex].length);\n                if (this.cells[rowIndex][randomCellIndex] === 0) return randomCellIndex;\n                return this.getStartCell(rowIndex);\n            }\n        },\n        {\n            key: \"getStartValue\",\n            value: function getStartValue() {\n                var num = Math.random();\n                if (num <= 0.9) return 2;\n                return 4;\n            }\n        },\n        {\n            key: \"isBoardChanged\",\n            value: function isBoardChanged(array, arrayCopy) {\n                return array.some(function(row, rowIndex) {\n                    return row.some(function(num, numIndex) {\n                        return num !== arrayCopy[rowIndex][numIndex];\n                    });\n                });\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nvar $197cd56b15c33885$var$cells = document.querySelectorAll(\".field-cell\");\nvar $197cd56b15c33885$var$winMessage = document.querySelector(\".message-win\");\nvar $197cd56b15c33885$var$loseMessage = document.querySelector(\".message-lose\");\nvar $197cd56b15c33885$var$startMessage = document.querySelector(\".message-start\");\nvar $197cd56b15c33885$var$score = document.querySelector(\".game-score\");\n// #region start/restart\nvar $197cd56b15c33885$var$button = document.querySelector(\".button\");\n$197cd56b15c33885$var$button.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$button.classList.toggle(\"start\");\n    $197cd56b15c33885$var$button.classList.toggle(\"restart\");\n    var buttonText = $197cd56b15c33885$var$button.classList[1];\n    if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        $197cd56b15c33885$var$game.start();\n        $197cd56b15c33885$var$startMessage.classList.add(\"hidden\");\n    }\n    if ($197cd56b15c33885$var$button.classList.contains(\"start\")) {\n        $197cd56b15c33885$var$game.restart();\n        $197cd56b15c33885$var$winMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$loseMessage.classList.add(\"hidden\");\n        $197cd56b15c33885$var$startMessage.classList.remove(\"hidden\");\n    }\n    $197cd56b15c33885$var$button.innerHTML = buttonText[0].toUpperCase() + buttonText.slice(1);\n    $197cd56b15c33885$var$gameToHTML();\n});\n// #endregion\nwindow.addEventListener(\"keydown\", function(_event) {\n    if ($197cd56b15c33885$var$button.classList.contains(\"restart\")) {\n        switch(_event.key){\n            case \"ArrowLeft\":\n                $197cd56b15c33885$var$game.moveLeft();\n                break;\n            case \"ArrowUp\":\n                $197cd56b15c33885$var$game.moveUp();\n                break;\n            case \"ArrowRight\":\n                $197cd56b15c33885$var$game.moveRight();\n                break;\n            case \"ArrowDown\":\n                $197cd56b15c33885$var$game.moveDown();\n                break;\n        }\n        $197cd56b15c33885$var$gameToHTML();\n        if ($197cd56b15c33885$var$game.getStatus() === \"win\") $197cd56b15c33885$var$winMessage.classList.remove(\"hidden\");\n        if ($197cd56b15c33885$var$game.getStatus() === \"lose\") $197cd56b15c33885$var$loseMessage.classList.remove(\"hidden\");\n    }\n});\nfunction $197cd56b15c33885$var$gameToHTML() {\n    $197cd56b15c33885$var$game.cells.forEach(function(row, rowIndex) {\n        return row.forEach(function(num, numIndex) {\n            var neededIndex = numIndex + rowIndex * row.length;\n            if (num === 0) $197cd56b15c33885$var$cells[neededIndex].innerHTML = \"\";\n            else $197cd56b15c33885$var$cells[neededIndex].innerHTML = num;\n            if ($197cd56b15c33885$var$cells[neededIndex].innerHTML === \"\") $197cd56b15c33885$var$cells[neededIndex].className = \"field-cell\";\n            else $197cd56b15c33885$var$cells[neededIndex].className = \"field-cell field-cell--\".concat($197cd56b15c33885$var$cells[neededIndex].innerHTML);\n        });\n    });\n    $197cd56b15c33885$var$score.innerHTML = $197cd56b15c33885$var$game.score;\n}\n\n})();\n//# sourceMappingURL=index.995fb46d.js.map\n","/* eslint-disable function-paren-newline */\n'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\nconst score = document.querySelector('.game-score');\n\n// #region start/restart\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  const buttonText = button.classList[1];\n\n  if (button.classList.contains('restart')) {\n    game.start();\n    startMessage.classList.add('hidden');\n  }\n\n  if (button.classList.contains('start')) {\n    game.restart();\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    startMessage.classList.remove('hidden');\n  }\n\n  button.innerHTML = buttonText[0].toUpperCase() + buttonText.slice(1);\n\n  gameToHTML();\n});\n\n// #endregion\n\nwindow.addEventListener('keydown', (_event) => {\n  if (button.classList.contains('restart')) {\n    switch (_event.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    gameToHTML();\n\n    if (game.getStatus() === 'win') {\n      winMessage.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n});\n\nfunction gameToHTML() {\n  game.cells.forEach((row, rowIndex) =>\n    row.forEach((num, numIndex) => {\n      const neededIndex = numIndex + rowIndex * row.length;\n\n      if (num === 0) {\n        cells[neededIndex].innerHTML = '';\n      } else {\n        cells[neededIndex].innerHTML = num;\n      }\n\n      if (cells[neededIndex].innerHTML === '') {\n        cells[neededIndex].className = 'field-cell';\n      } else {\n        cells[neededIndex].className =\n          `field-cell field-cell--${cells[neededIndex].innerHTML}`;\n      }\n    }),\n  );\n\n  score.innerHTML = game.score;\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable function-paren-newline */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.cells = initialState;\n    this.initialCells = initialState.map((row) => [...row]);\n    this.isGameStarted = false;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const cellsCopy = this.cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      let mergers = 0;\n      const MERGERS_LIMIT = 2;\n\n      this.cells.forEach((row) => {\n        for (let numIndex = 0; numIndex < row.length - 1; numIndex++) {\n          if (row[numIndex] && row[numIndex] === row[numIndex + 1]) {\n            [row[numIndex], row[numIndex + 1]] = [(row[numIndex] *= 2), 0];\n            this.score += row[numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let numIndex = 1; numIndex < row.length; numIndex++) {\n          for (let i = numIndex; i > 0; i--) {\n            if (row[i - 1] === 0) {\n              [row[i - 1], row[i]] = [row[i], row[i - 1]];\n\n              continue;\n            }\n\n            if (row[i - 1] === row[i] && mergers < MERGERS_LIMIT) {\n              [row[i - 1], row[i]] = [(row[i - 1] *= 2), 0];\n              this.score += row[i - 1];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      });\n\n      if (this.isBoardChanged(this.cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveRight() {\n    const cellsCopy = this.cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      let mergers = 0;\n      const MERGERS_LIMIT = 2;\n\n      this.cells.forEach((row) => {\n        for (let numIndex = row.length - 1; numIndex > 0; numIndex--) {\n          if (row[numIndex] && row[numIndex] === row[numIndex - 1]) {\n            [row[numIndex], row[numIndex - 1]] = [(row[numIndex] *= 2), 0];\n            this.score += row[numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let numIndex = row.length - 2; numIndex >= 0; numIndex--) {\n          for (let i = numIndex; i < row.length - 1; i++) {\n            if (row[i + 1] === 0) {\n              [row[i + 1], row[i]] = [row[i], row[i + 1]];\n\n              continue;\n            }\n\n            if (row[i + 1] === row[i] && mergers < MERGERS_LIMIT) {\n              [row[i + 1], row[i]] = [(row[i + 1] *= 2), 0];\n              this.score += row[i + 1];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      });\n\n      if (this.isBoardChanged(this.cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveUp() {\n    const cells = this.cells;\n    const cellsCopy = cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      for (let numIndex = 0; numIndex < cells[0].length; numIndex++) {\n        let mergers = 0;\n        const MERGERS_LIMIT = 2;\n\n        cells.forEach((row, rowIndex) => {\n          if (\n            rowIndex < cells.length - 1 &&\n            cells[rowIndex][numIndex] &&\n            cells[rowIndex + 1][numIndex] === cells[rowIndex][numIndex]\n          ) {\n            cells[rowIndex][numIndex] *= 2;\n            cells[rowIndex + 1][numIndex] = 0;\n            this.score += cells[rowIndex][numIndex];\n            mergers += 1;\n          }\n        });\n\n        for (let rowIndex = 1; rowIndex < cells.length; rowIndex++) {\n          for (let i = rowIndex; i > 0; i--) {\n            if (cells[i - 1][numIndex] === 0) {\n              cells[i - 1][numIndex] = cells[i][numIndex];\n              cells[i][numIndex] = 0;\n\n              continue;\n            }\n\n            if (\n              cells[i - 1][numIndex] === cells[i][numIndex] &&\n              mergers < MERGERS_LIMIT - 1\n            ) {\n              cells[i - 1][numIndex] *= 2;\n              cells[i][numIndex] = 0;\n              mergers += 1;\n              this.score += cells[i - 1][numIndex];\n\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.isBoardChanged(cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveDown() {\n    const cells = this.cells;\n    const cellsCopy = cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      for (let numIndex = 0; numIndex < cells[0].length; numIndex++) {\n        let mergers = 0;\n        const MERGERS_LIMIT = 2;\n\n        for (let i = cells.length - 1; i >= 0; i--) {\n          if (\n            i > 0 &&\n            cells[i][numIndex] &&\n            cells[i - 1][numIndex] === cells[i][numIndex]\n          ) {\n            cells[i][numIndex] *= 2;\n            cells[i - 1][numIndex] = 0;\n            this.score += cells[i][numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let rowIndex = cells.length - 2; rowIndex >= 0; rowIndex--) {\n          for (let i = rowIndex; i < cells.length - 1; i++) {\n            if (cells[i + 1][numIndex] === 0) {\n              cells[i + 1][numIndex] = cells[i][numIndex];\n              cells[i][numIndex] = 0;\n\n              continue;\n            }\n\n            if (\n              cells[i + 1][numIndex] === cells[i][numIndex] &&\n              mergers < MERGERS_LIMIT - 1\n            ) {\n              cells[i + 1][numIndex] *= 2;\n              cells[i][numIndex] = 0;\n              this.score += cells[i + 1][numIndex];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.isBoardChanged(cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.cells;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const checker = this.cells.some((row, rowIndex) =>\n      row.some((cell, cellIndex) => {\n        if (\n          (rowIndex < this.cells.length - 1 &&\n            (cell === row[cellIndex + 1] ||\n              cell === this.cells[rowIndex + 1][cellIndex])) ||\n          (rowIndex === this.cells.length - 1 && cell === row[cellIndex + 1])\n        ) {\n          return true;\n        }\n\n        return false;\n      }),\n    );\n\n    if (this.cells.some((row) => row.some((cell) => cell === 2048))) {\n      return 'win';\n    }\n\n    if (\n      this.cells.every((row) => row.every((cell) => cell !== 0)) &&\n      checker === false\n    ) {\n      return 'lose';\n    }\n\n    if (this.isGameStarted === false) {\n      return 'idle';\n    }\n\n    if (this.isGameStarted === true) {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const firstStartRowIndex = this.getStartRow();\n    const firstStartCellIndex = this.getStartCell(firstStartRowIndex);\n    const secondStartRowIndex = this.getStartRow();\n    const secondStartCellIndex = this.getStartCell(secondStartRowIndex);\n\n    if (\n      firstStartRowIndex === secondStartRowIndex &&\n      firstStartCellIndex === secondStartCellIndex\n    ) {\n      return this.start();\n    }\n\n    const firstValue = this.getStartValue();\n    const secondValue = this.getStartValue();\n\n    this.cells[firstStartRowIndex][firstStartCellIndex] = firstValue;\n    this.cells[secondStartRowIndex][secondStartCellIndex] = secondValue;\n\n    this.isGameStarted = true;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.cells.forEach((row, rowIndex) =>\n      row.forEach((cell, cellIndex) => {\n        row[cellIndex] = this.initialCells[rowIndex][cellIndex];\n      }),\n    );\n\n    this.isGameStarted = false;\n    this.score = 0;\n  }\n\n  addStartingValue() {\n    const rowIndex = this.getStartRow();\n    const cellIndex = this.getStartCell(rowIndex);\n    const value = this.getStartValue();\n\n    this.cells[rowIndex][cellIndex] = value;\n  }\n\n  getStartRow() {\n    const randomRowIndex = Math.floor(Math.random() * this.cells.length);\n\n    if (this.cells[randomRowIndex].every((cell) => cell !== 0)) {\n      return this.getStartRow();\n    }\n\n    return randomRowIndex;\n  }\n\n  getStartCell(rowIndex) {\n    const randomCellIndex = Math.floor(\n      Math.random() * this.cells[rowIndex].length,\n    );\n\n    if (this.cells[rowIndex][randomCellIndex] === 0) {\n      return randomCellIndex;\n    }\n\n    return this.getStartCell(rowIndex);\n  }\n\n  getStartValue() {\n    const num = Math.random();\n\n    if (num <= 0.9) {\n      return 2;\n    }\n\n    return 4;\n  }\n\n  isBoardChanged(array, arrayCopy) {\n    return array.some((row, rowIndex) =>\n      row.some((num, numIndex) => {\n        return num !== arrayCopy[rowIndex][numIndex];\n      }),\n    );\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$227c6742e0ff6f82$export$71511d61b312f219","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","cells","initialCells","map","row","isGameStarted","score","key","value","_this","cellsCopy","mergers","forEach","ref","ref1","ref2","numIndex","numIndex1","isBoardChanged","addStartingValue","_this1","_loop","rowIndex","MERGERS_LIMIT","i1","checker","some","cell","cellIndex","every","firstStartRowIndex","getStartRow","firstStartCellIndex","getStartCell","secondStartRowIndex","secondStartCellIndex","start","firstValue","getStartValue","secondValue","randomRowIndex","Math","floor","random","randomCellIndex","num","array","arrayCopy","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$cells","document","querySelectorAll","$197cd56b15c33885$var$winMessage","querySelector","$197cd56b15c33885$var$loseMessage","$197cd56b15c33885$var$startMessage","$197cd56b15c33885$var$score","$197cd56b15c33885$var$button","$197cd56b15c33885$var$gameToHTML","neededIndex","innerHTML","className","concat","addEventListener","classList","toggle","buttonText","contains","add","restart","remove","toUpperCase","window","_event","moveLeft","moveUp","moveRight","moveDown","getStatus"],"version":3,"file":"index.995fb46d.js.map"}