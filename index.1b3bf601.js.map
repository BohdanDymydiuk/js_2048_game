{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["/* eslint-disable function-paren-newline */ \"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable no-unused-vars */ /* eslint-disable function-paren-newline */ \"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.cells = initialState;\n        this.initialCells = initialState.map((row)=>[\n                ...row\n            ]);\n        this.isGameStarted = false;\n        this.score = 0;\n    }\n    moveLeft() {\n        const cellsCopy = this.cells.map((row)=>[\n                ...row\n            ]);\n        if (this.isGameStarted === true) {\n            let mergers = 0;\n            const MERGERS_LIMIT = 2;\n            this.cells.forEach((row)=>{\n                for(let numIndex = 0; numIndex < row.length - 1; numIndex++)if (row[numIndex] && row[numIndex] === row[numIndex + 1]) {\n                    [row[numIndex], row[numIndex + 1]] = [\n                        row[numIndex] *= 2,\n                        0\n                    ];\n                    this.score += row[numIndex];\n                    mergers += 1;\n                }\n                for(let numIndex = 1; numIndex < row.length; numIndex++)for(let i = numIndex; i > 0; i--){\n                    if (row[i - 1] === 0) {\n                        [row[i - 1], row[i]] = [\n                            row[i],\n                            row[i - 1]\n                        ];\n                        continue;\n                    }\n                    if (row[i - 1] === row[i] && mergers < MERGERS_LIMIT) {\n                        [row[i - 1], row[i]] = [\n                            row[i - 1] *= 2,\n                            0\n                        ];\n                        this.score += row[i - 1];\n                        mergers += 1;\n                        break;\n                    }\n                }\n            });\n            if (this.isBoardChanged(this.cells, cellsCopy) === true) this.addStartingValue();\n        }\n    }\n    moveRight() {\n        const cellsCopy = this.cells.map((row)=>[\n                ...row\n            ]);\n        if (this.isGameStarted === true) {\n            let mergers = 0;\n            const MERGERS_LIMIT = 2;\n            this.cells.forEach((row)=>{\n                for(let numIndex = row.length - 1; numIndex > 0; numIndex--)if (row[numIndex] && row[numIndex] === row[numIndex - 1]) {\n                    [row[numIndex], row[numIndex - 1]] = [\n                        row[numIndex] *= 2,\n                        0\n                    ];\n                    this.score += row[numIndex];\n                    mergers += 1;\n                }\n                for(let numIndex = row.length - 2; numIndex >= 0; numIndex--)for(let i = numIndex; i < row.length - 1; i++){\n                    if (row[i + 1] === 0) {\n                        [row[i + 1], row[i]] = [\n                            row[i],\n                            row[i + 1]\n                        ];\n                        continue;\n                    }\n                    if (row[i + 1] === row[i] && mergers < MERGERS_LIMIT) {\n                        [row[i + 1], row[i]] = [\n                            row[i + 1] *= 2,\n                            0\n                        ];\n                        this.score += row[i + 1];\n                        mergers += 1;\n                        break;\n                    }\n                }\n            });\n            if (this.isBoardChanged(this.cells, cellsCopy) === true) this.addStartingValue();\n        }\n    }\n    moveUp() {\n        const cells = this.cells;\n        const cellsCopy = cells.map((row)=>[\n                ...row\n            ]);\n        if (this.isGameStarted === true) {\n            for(let numIndex = 0; numIndex < cells[0].length; numIndex++){\n                let mergers = 0;\n                const MERGERS_LIMIT = 2;\n                cells.forEach((row, rowIndex)=>{\n                    if (rowIndex < cells.length - 1 && cells[rowIndex][numIndex] && cells[rowIndex + 1][numIndex] === cells[rowIndex][numIndex]) {\n                        cells[rowIndex][numIndex] *= 2;\n                        cells[rowIndex + 1][numIndex] = 0;\n                        this.score += cells[rowIndex][numIndex];\n                        mergers += 1;\n                    }\n                });\n                for(let rowIndex = 1; rowIndex < cells.length; rowIndex++)for(let i = rowIndex; i > 0; i--){\n                    if (cells[i - 1][numIndex] === 0) {\n                        cells[i - 1][numIndex] = cells[i][numIndex];\n                        cells[i][numIndex] = 0;\n                        continue;\n                    }\n                    if (cells[i - 1][numIndex] === cells[i][numIndex] && mergers < MERGERS_LIMIT - 1) {\n                        cells[i - 1][numIndex] *= 2;\n                        cells[i][numIndex] = 0;\n                        mergers += 1;\n                        this.score += cells[i - 1][numIndex];\n                        break;\n                    }\n                }\n            }\n            if (this.isBoardChanged(cells, cellsCopy) === true) this.addStartingValue();\n        }\n    }\n    moveDown() {\n        const cells = this.cells;\n        const cellsCopy = cells.map((row)=>[\n                ...row\n            ]);\n        if (this.isGameStarted === true) {\n            for(let numIndex = 0; numIndex < cells[0].length; numIndex++){\n                let mergers = 0;\n                const MERGERS_LIMIT = 2;\n                for(let i = cells.length - 1; i >= 0; i--)if (i > 0 && cells[i][numIndex] && cells[i - 1][numIndex] === cells[i][numIndex]) {\n                    cells[i][numIndex] *= 2;\n                    cells[i - 1][numIndex] = 0;\n                    this.score += cells[i][numIndex];\n                    mergers += 1;\n                }\n                for(let rowIndex = cells.length - 2; rowIndex >= 0; rowIndex--)for(let i = rowIndex; i < cells.length - 1; i++){\n                    if (cells[i + 1][numIndex] === 0) {\n                        cells[i + 1][numIndex] = cells[i][numIndex];\n                        cells[i][numIndex] = 0;\n                        continue;\n                    }\n                    if (cells[i + 1][numIndex] === cells[i][numIndex] && mergers < MERGERS_LIMIT - 1) {\n                        cells[i + 1][numIndex] *= 2;\n                        cells[i][numIndex] = 0;\n                        this.score += cells[i + 1][numIndex];\n                        mergers += 1;\n                        break;\n                    }\n                }\n            }\n            if (this.isBoardChanged(cells, cellsCopy) === true) this.addStartingValue();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.cells;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        const checker = this.cells.some((row, rowIndex)=>row.some((cell, cellIndex)=>{\n                if (rowIndex < this.cells.length - 1 && (cell === row[cellIndex + 1] || cell === this.cells[rowIndex + 1][cellIndex]) || rowIndex === this.cells.length - 1 && cell === row[cellIndex + 1]) return true;\n                return false;\n            }));\n        if (this.cells.some((row)=>row.some((cell)=>cell === 2048))) return \"win\";\n        if (this.cells.every((row)=>row.every((cell)=>cell !== 0)) && checker === false) return \"lose\";\n        if (this.isGameStarted === false) return \"idle\";\n        if (this.isGameStarted === true) return \"playing\";\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        const firstStartRowIndex = this.getStartRow();\n        const firstStartCellIndex = this.getStartCell(firstStartRowIndex);\n        const secondStartRowIndex = this.getStartRow();\n        const secondStartCellIndex = this.getStartCell(secondStartRowIndex);\n        if (firstStartRowIndex === secondStartRowIndex && firstStartCellIndex === secondStartCellIndex) return this.start();\n        const firstValue = this.getStartValue();\n        const secondValue = this.getStartValue();\n        this.cells[firstStartRowIndex][firstStartCellIndex] = firstValue;\n        this.cells[secondStartRowIndex][secondStartCellIndex] = secondValue;\n        this.isGameStarted = true;\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.cells.forEach((row, rowIndex)=>row.forEach((cell, cellIndex)=>{\n                row[cellIndex] = this.initialCells[rowIndex][cellIndex];\n            }));\n        this.isGameStarted = false;\n        this.score = 0;\n    }\n    addStartingValue() {\n        const rowIndex = this.getStartRow();\n        const cellIndex = this.getStartCell(rowIndex);\n        const value = this.getStartValue();\n        this.cells[rowIndex][cellIndex] = value;\n    }\n    getStartRow() {\n        const randomRowIndex = Math.floor(Math.random() * this.cells.length);\n        if (this.cells[randomRowIndex].every((cell)=>cell !== 0)) return this.getStartRow();\n        return randomRowIndex;\n    }\n    getStartCell(rowIndex) {\n        const randomCellIndex = Math.floor(Math.random() * this.cells[rowIndex].length);\n        if (this.cells[rowIndex][randomCellIndex] === 0) return randomCellIndex;\n        return this.getStartCell(rowIndex);\n    }\n    getStartValue() {\n        const num = Math.random();\n        if (num <= 0.9) return 2;\n        return 4;\n    }\n    isBoardChanged(array, arrayCopy) {\n        return array.some((row, rowIndex)=>row.some((num, numIndex)=>{\n                return num !== arrayCopy[rowIndex][numIndex];\n            }));\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$cells = document.querySelectorAll(\".field-cell\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n// #region start/restart\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    const buttonText = $09e991522ca7e64e$var$button.classList[1];\n    if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    }\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n    }\n    $09e991522ca7e64e$var$button.innerHTML = buttonText[0].toUpperCase() + buttonText.slice(1);\n    $09e991522ca7e64e$var$gameToHTML();\n});\n// #endregion\nwindow.addEventListener(\"keydown\", (_event)=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) {\n        switch(_event.key){\n            case \"ArrowLeft\":\n                $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowUp\":\n                $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowRight\":\n                $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowDown\":\n                $09e991522ca7e64e$var$game.moveDown();\n                break;\n        }\n        $09e991522ca7e64e$var$gameToHTML();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"win\") $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n        if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    }\n});\nfunction $09e991522ca7e64e$var$gameToHTML() {\n    $09e991522ca7e64e$var$game.cells.forEach((row, rowIndex)=>row.forEach((num, numIndex)=>{\n            const neededIndex = numIndex + rowIndex * row.length;\n            if (num === 0) $09e991522ca7e64e$var$cells[neededIndex].innerHTML = \"\";\n            else $09e991522ca7e64e$var$cells[neededIndex].innerHTML = num;\n            if ($09e991522ca7e64e$var$cells[neededIndex].innerHTML === \"\") $09e991522ca7e64e$var$cells[neededIndex].className = \"field-cell\";\n            else $09e991522ca7e64e$var$cells[neededIndex].className = `field-cell field-cell--${$09e991522ca7e64e$var$cells[neededIndex].innerHTML}`;\n        }));\n    $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.score;\n}\n\n\n//# sourceMappingURL=index.1b3bf601.js.map\n","/* eslint-disable function-paren-newline */\n'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst cells = document.querySelectorAll('.field-cell');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\nconst startMessage = document.querySelector('.message-start');\nconst score = document.querySelector('.game-score');\n\n// #region start/restart\n\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', () => {\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  const buttonText = button.classList[1];\n\n  if (button.classList.contains('restart')) {\n    game.start();\n    startMessage.classList.add('hidden');\n  }\n\n  if (button.classList.contains('start')) {\n    game.restart();\n    winMessage.classList.add('hidden');\n    loseMessage.classList.add('hidden');\n    startMessage.classList.remove('hidden');\n  }\n\n  button.innerHTML = buttonText[0].toUpperCase() + buttonText.slice(1);\n\n  gameToHTML();\n});\n\n// #endregion\n\nwindow.addEventListener('keydown', (_event) => {\n  if (button.classList.contains('restart')) {\n    switch (_event.key) {\n      case 'ArrowLeft':\n        game.moveLeft();\n        break;\n\n      case 'ArrowUp':\n        game.moveUp();\n        break;\n\n      case 'ArrowRight':\n        game.moveRight();\n        break;\n\n      case 'ArrowDown':\n        game.moveDown();\n        break;\n    }\n\n    gameToHTML();\n\n    if (game.getStatus() === 'win') {\n      winMessage.classList.remove('hidden');\n    }\n\n    if (game.getStatus() === 'lose') {\n      loseMessage.classList.remove('hidden');\n    }\n  }\n});\n\nfunction gameToHTML() {\n  game.cells.forEach((row, rowIndex) =>\n    row.forEach((num, numIndex) => {\n      const neededIndex = numIndex + rowIndex * row.length;\n\n      if (num === 0) {\n        cells[neededIndex].innerHTML = '';\n      } else {\n        cells[neededIndex].innerHTML = num;\n      }\n\n      if (cells[neededIndex].innerHTML === '') {\n        cells[neededIndex].className = 'field-cell';\n      } else {\n        cells[neededIndex].className =\n          `field-cell field-cell--${cells[neededIndex].innerHTML}`;\n      }\n    }),\n  );\n\n  score.innerHTML = game.score;\n}\n","/* eslint-disable no-unused-vars */\n/* eslint-disable function-paren-newline */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.cells = initialState;\n    this.initialCells = initialState.map((row) => [...row]);\n    this.isGameStarted = false;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    const cellsCopy = this.cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      let mergers = 0;\n      const MERGERS_LIMIT = 2;\n\n      this.cells.forEach((row) => {\n        for (let numIndex = 0; numIndex < row.length - 1; numIndex++) {\n          if (row[numIndex] && row[numIndex] === row[numIndex + 1]) {\n            [row[numIndex], row[numIndex + 1]] = [(row[numIndex] *= 2), 0];\n            this.score += row[numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let numIndex = 1; numIndex < row.length; numIndex++) {\n          for (let i = numIndex; i > 0; i--) {\n            if (row[i - 1] === 0) {\n              [row[i - 1], row[i]] = [row[i], row[i - 1]];\n\n              continue;\n            }\n\n            if (row[i - 1] === row[i] && mergers < MERGERS_LIMIT) {\n              [row[i - 1], row[i]] = [(row[i - 1] *= 2), 0];\n              this.score += row[i - 1];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      });\n\n      if (this.isBoardChanged(this.cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveRight() {\n    const cellsCopy = this.cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      let mergers = 0;\n      const MERGERS_LIMIT = 2;\n\n      this.cells.forEach((row) => {\n        for (let numIndex = row.length - 1; numIndex > 0; numIndex--) {\n          if (row[numIndex] && row[numIndex] === row[numIndex - 1]) {\n            [row[numIndex], row[numIndex - 1]] = [(row[numIndex] *= 2), 0];\n            this.score += row[numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let numIndex = row.length - 2; numIndex >= 0; numIndex--) {\n          for (let i = numIndex; i < row.length - 1; i++) {\n            if (row[i + 1] === 0) {\n              [row[i + 1], row[i]] = [row[i], row[i + 1]];\n\n              continue;\n            }\n\n            if (row[i + 1] === row[i] && mergers < MERGERS_LIMIT) {\n              [row[i + 1], row[i]] = [(row[i + 1] *= 2), 0];\n              this.score += row[i + 1];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      });\n\n      if (this.isBoardChanged(this.cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveUp() {\n    const cells = this.cells;\n    const cellsCopy = cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      for (let numIndex = 0; numIndex < cells[0].length; numIndex++) {\n        let mergers = 0;\n        const MERGERS_LIMIT = 2;\n\n        cells.forEach((row, rowIndex) => {\n          if (\n            rowIndex < cells.length - 1 &&\n            cells[rowIndex][numIndex] &&\n            cells[rowIndex + 1][numIndex] === cells[rowIndex][numIndex]\n          ) {\n            cells[rowIndex][numIndex] *= 2;\n            cells[rowIndex + 1][numIndex] = 0;\n            this.score += cells[rowIndex][numIndex];\n            mergers += 1;\n          }\n        });\n\n        for (let rowIndex = 1; rowIndex < cells.length; rowIndex++) {\n          for (let i = rowIndex; i > 0; i--) {\n            if (cells[i - 1][numIndex] === 0) {\n              cells[i - 1][numIndex] = cells[i][numIndex];\n              cells[i][numIndex] = 0;\n\n              continue;\n            }\n\n            if (\n              cells[i - 1][numIndex] === cells[i][numIndex] &&\n              mergers < MERGERS_LIMIT - 1\n            ) {\n              cells[i - 1][numIndex] *= 2;\n              cells[i][numIndex] = 0;\n              mergers += 1;\n              this.score += cells[i - 1][numIndex];\n\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.isBoardChanged(cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  moveDown() {\n    const cells = this.cells;\n    const cellsCopy = cells.map((row) => [...row]);\n\n    if (this.isGameStarted === true) {\n      for (let numIndex = 0; numIndex < cells[0].length; numIndex++) {\n        let mergers = 0;\n        const MERGERS_LIMIT = 2;\n\n        for (let i = cells.length - 1; i >= 0; i--) {\n          if (\n            i > 0 &&\n            cells[i][numIndex] &&\n            cells[i - 1][numIndex] === cells[i][numIndex]\n          ) {\n            cells[i][numIndex] *= 2;\n            cells[i - 1][numIndex] = 0;\n            this.score += cells[i][numIndex];\n            mergers += 1;\n          }\n        }\n\n        for (let rowIndex = cells.length - 2; rowIndex >= 0; rowIndex--) {\n          for (let i = rowIndex; i < cells.length - 1; i++) {\n            if (cells[i + 1][numIndex] === 0) {\n              cells[i + 1][numIndex] = cells[i][numIndex];\n              cells[i][numIndex] = 0;\n\n              continue;\n            }\n\n            if (\n              cells[i + 1][numIndex] === cells[i][numIndex] &&\n              mergers < MERGERS_LIMIT - 1\n            ) {\n              cells[i + 1][numIndex] *= 2;\n              cells[i][numIndex] = 0;\n              this.score += cells[i + 1][numIndex];\n              mergers += 1;\n\n              break;\n            }\n          }\n        }\n      }\n\n      if (this.isBoardChanged(cells, cellsCopy) === true) {\n        this.addStartingValue();\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.cells;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    const checker = this.cells.some((row, rowIndex) =>\n      row.some((cell, cellIndex) => {\n        if (\n          (rowIndex < this.cells.length - 1 &&\n            (cell === row[cellIndex + 1] ||\n              cell === this.cells[rowIndex + 1][cellIndex])) ||\n          (rowIndex === this.cells.length - 1 && cell === row[cellIndex + 1])\n        ) {\n          return true;\n        }\n\n        return false;\n      }),\n    );\n\n    if (this.cells.some((row) => row.some((cell) => cell === 2048))) {\n      return 'win';\n    }\n\n    if (\n      this.cells.every((row) => row.every((cell) => cell !== 0)) &&\n      checker === false\n    ) {\n      return 'lose';\n    }\n\n    if (this.isGameStarted === false) {\n      return 'idle';\n    }\n\n    if (this.isGameStarted === true) {\n      return 'playing';\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const firstStartRowIndex = this.getStartRow();\n    const firstStartCellIndex = this.getStartCell(firstStartRowIndex);\n    const secondStartRowIndex = this.getStartRow();\n    const secondStartCellIndex = this.getStartCell(secondStartRowIndex);\n\n    if (\n      firstStartRowIndex === secondStartRowIndex &&\n      firstStartCellIndex === secondStartCellIndex\n    ) {\n      return this.start();\n    }\n\n    const firstValue = this.getStartValue();\n    const secondValue = this.getStartValue();\n\n    this.cells[firstStartRowIndex][firstStartCellIndex] = firstValue;\n    this.cells[secondStartRowIndex][secondStartCellIndex] = secondValue;\n\n    this.isGameStarted = true;\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.cells.forEach((row, rowIndex) =>\n      row.forEach((cell, cellIndex) => {\n        row[cellIndex] = this.initialCells[rowIndex][cellIndex];\n      }),\n    );\n\n    this.isGameStarted = false;\n    this.score = 0;\n  }\n\n  addStartingValue() {\n    const rowIndex = this.getStartRow();\n    const cellIndex = this.getStartCell(rowIndex);\n    const value = this.getStartValue();\n\n    this.cells[rowIndex][cellIndex] = value;\n  }\n\n  getStartRow() {\n    const randomRowIndex = Math.floor(Math.random() * this.cells.length);\n\n    if (this.cells[randomRowIndex].every((cell) => cell !== 0)) {\n      return this.getStartRow();\n    }\n\n    return randomRowIndex;\n  }\n\n  getStartCell(rowIndex) {\n    const randomCellIndex = Math.floor(\n      Math.random() * this.cells[rowIndex].length,\n    );\n\n    if (this.cells[rowIndex][randomCellIndex] === 0) {\n      return randomCellIndex;\n    }\n\n    return this.getStartCell(rowIndex);\n  }\n\n  getStartValue() {\n    const num = Math.random();\n\n    if (num <= 0.9) {\n      return 2;\n    }\n\n    return 4;\n  }\n\n  isBoardChanged(array, arrayCopy) {\n    return array.some((row, rowIndex) =>\n      row.some((num, numIndex) => {\n        return num !== arrayCopy[rowIndex][numIndex];\n      }),\n    );\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","cells","initialCells","map","row","isGameStarted","score","moveLeft","cellsCopy","mergers","forEach","numIndex","length","i","isBoardChanged","addStartingValue","moveRight","moveUp","rowIndex","MERGERS_LIMIT","moveDown","getScore","getState","getStatus","checker","some","cell","cellIndex","every","start","firstStartRowIndex","getStartRow","firstStartCellIndex","getStartCell","secondStartRowIndex","secondStartCellIndex","firstValue","getStartValue","secondValue","restart","value","randomRowIndex","Math","floor","random","randomCellIndex","num","array","arrayCopy","$09e991522ca7e64e$var$cells","document","querySelectorAll","$09e991522ca7e64e$var$winMessage","querySelector","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$gameToHTML","neededIndex","innerHTML","className","addEventListener","classList","toggle","buttonText","contains","add","remove","toUpperCase","slice","window","_event","key"],"version":3,"file":"index.1b3bf601.js.map"}